#
# This is an example VCL file for Varnish.
#
# It does not do anything by default, delegating control to the
# builtin VCL. The builtin VCL is called when there is no explicit
# return statement.
#
# See the VCL chapters in the Users Guide at https://www.varnish-cache.org/docs/
# and https://www.varnish-cache.org/trac/wiki/VCLExamples for more examples.

# Marker to tell the VCL compiler that this VCL has been adapted to the
# new 4.0 format.
vcl 4.0;

# ACL for trusted ips
acl trusted {
        "localhost";
        "192.168.1.16";
}

# Default backend definition. Set this to point to your content server.
backend default {
    .host = "192.168.1.7";
    .port = "80";
    .probe = {
        .url = "/";
        .timeout = 2s;
        .interval = 5s;
        .window = 5;
        .threshold = 3;
    }
}

sub vcl_recv {
    # Happens before we check if we have this in cache already.
    #
    # Typically you clean up the request here, removing cookies you don't need,
    # rewriting the request, etc.

    if (req.method == "PURGE") {
          if (!client.ip ~ trusted) {
               return(synth(405,"Not allowed."));
          }
          ban("req.http.host == " +req.http.host+" && req.url ~ "+req.url);
          return(synth(200, "Ban added"));

    }

    # Cache png, jpg and text files
    if (req.url ~ "(PNG|jpg|jpeg|txt)") {
          return(hash);
    }

    #Do not cache anything
    return(pass);

}

sub vcl_backend_response {
    # Called after the response headers have been successfully retrieved from the backend.
    # Cache specific file types
    if (bereq.url ~ "(PNG|jpg|txt)$") {
          set beresp.ttl = 120s;
          return(deliver);
    }

    # Grace time for cache to live when backend is sick
    set beresp.grace = 120s;
}

sub vcl_deliver {
    # Happens when we have all the pieces we need, and are about to send the
    # response to the client.
    #
    # You can do accounting or modifying the final object here.

    # Add custom header
    set resp.http.x-test = "varnish-1";
}
